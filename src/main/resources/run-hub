#!/bin/sh

# Find the top of the workspace regardless of where this script was
# started from
SCRIPT_DIR=`dirname $0`
START_DIR=`pwd`
REL_PATH_TO_WS="../../.."
WS_DIR=`cd ${START_DIR}/${SCRIPT_DIR}/${REL_PATH_TO_WS} && pwd`

# The local user's maven repository from which the required libs will
# be found
REPO_DIR=${HOME}/.m2/repository

REQ_PROJECTS="StringHub \
juggler \
payload \
daq-io \
daq-common \
splicer \
daq-request-filler \
daq-log"

# These are hard-coding version numbers until I can get mvn
# creating/assembling releases in the form of jar files which have
# what is (and only what is) needed.
REQ_LIBS="log4j-1.2.7 \
dom4j-1.6.1 \
jaxen-1.1-beta-6 \
colt-1.0.3 \
xmlrpc-common-3.0 \
xmlrpc-client-3.0 \
xmlrpc-server-3.0 \
commons-logging-1.0.3 \
concurrent-1.3.4 \
jmxtools-1.2.1 \
ws-commons-util-1.0.1"

missing_jar=
CLASSPATH=""
for proj in ${REQ_PROJECTS}; do
  jar=${WS_DIR}/${proj}/target/${proj}-${pom.version}.jar
  if [ -f "$jar" ]; then
    CLASSPATH=${jar}:${CLASSPATH}
  else
    echo "$0: Cannot find ${proj} jar file" >&2
    missing_jar=true
  fi
done

for lib in ${REQ_LIBS}; do
  jar=
  for i in `find ${REPO_DIR} -name "${lib}.jar"`; do
    jar="$i"
  done
  if [ -f "$jar" ]; then
    CLASSPATH=$jar:${CLASSPATH}
  else
    echo "$0: Cannot find ${lib} jar file" >&2
    missing_jar=true
  fi
done

if [ ! -z ${missing_jar} ]; then
  exit 1
fi

hubId=$1
shift

sim=true

# look for --real-hub argument
#
args=
for i in $*; do
  if [ "$i" = "--real-hub" ]; then
    sim=false
  else
    if [ -z "$args" ]; then
      args="$i"
    else
      args="$args $i"
    fi
  fi
done

# restore remaining args
#
set -- $args

# is this running on SPS?
#
case `hostname` in
sps*) SPS=true;;
*) SPS="";;
esac

if [ "$SPS" = "true" -a -d /usr/java/jdk1.5.0_07 ]; then
  export JAVA_HOME=/usr/java/jdk1.5.0_07
  JAVA=$JAVA_HOME/bin/java
else
  JAVA=java
fi

$JAVA -Xmx1024m -Dicecube.daq.stringhub.componentId=$hubId \
    -Dicecube.daq.bindery.StreamBinder.prescale=1 \
    -cp "$CLASSPATH" icecube.daq.stringhub.Shell $*
